import React from 'react';
import CodeBlock from './CodeBlock';
import { DatabaseIcon } from './icons/DatabaseIcon';

const profilesTableSql = `-- Create a table for public user profiles
CREATE TABLE profiles (
  id UUID REFERENCES auth.users NOT NULL PRIMARY KEY,
  updated_at TIMESTAMPTZ,
  username TEXT UNIQUE,
  full_name TEXT,
  avatar_url TEXT,
  website TEXT,
  role TEXT NOT NULL DEFAULT 'technician',

  CONSTRAINT username_length CHECK (char_length(username) >= 3)
);`;

const profilesRlsSql = `ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Public profiles are viewable by everyone." ON profiles
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile." ON profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile." ON profiles
  FOR UPDATE USING (auth.uid() = id);`;

const newUserTriggerSql = ` -- This trigger automatically creates a profile for new users.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, role)
  VALUES (new.id, new.raw_user_meta_data->>'full_name', 'technician');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- A trigger that calls our function upon user creation
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();`;

const equipmentTablesSql = `-- Create equipment table
CREATE TABLE equipment (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  name TEXT NOT NULL,
  category TEXT NOT NULL,
  description TEXT,
  image_url TEXT,
  serial_number TEXT UNIQUE
);

-- Create bookings table
CREATE TABLE bookings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    technician_id UUID REFERENCES public.profiles(id) NOT NULL,
    start_date TIMESTAMPTZ NOT NULL,
    end_date TIMESTAMPTZ NOT NULL,
    notes_for_coordinator TEXT,
    status TEXT NOT NULL DEFAULT 'upcoming' -- e.g., upcoming, active, completed, staged
);

-- Create a join table for bookings and equipment
CREATE TABLE booking_items (
    booking_id BIGINT REFERENCES public.bookings(id) ON DELETE CASCADE NOT NULL,
    equipment_id BIGINT REFERENCES public.equipment(id) ON DELETE CASCADE NOT NULL,
    PRIMARY KEY (booking_id, equipment_id)
);
`;

const equipmentRlsSql = `-- Secure the tables with RLS
ALTER TABLE equipment ENABLE ROW LEVEL SECURITY;
ALTER TABLE bookings ENABLE ROW LEVEL SECURITY;
ALTER TABLE booking_items ENABLE ROW LEVEL SECURITY;

-- Allow authenticated users to see all equipment
CREATE POLICY "Authenticated users can view equipment." ON equipment
  FOR SELECT USING (auth.role() = 'authenticated');

-- Technicians can create bookings for themselves
CREATE POLICY "Technicians can create their own bookings." ON bookings
  FOR INSERT WITH CHECK (auth.uid() = technician_id);

-- Technicians can see their own bookings
CREATE POLICY "Technicians can view their own bookings." ON bookings
  FOR SELECT USING (auth.uid() = technician_id);

-- Coordinators and admins can see all bookings
CREATE POLICY "Coordinators and admins can view all bookings." ON bookings
  FOR SELECT USING (
    (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('coordinator', 'admin')
  );

-- Corresponding policies for the join table
CREATE POLICY "Users can manage items for bookings they have access to." ON booking_items
  FOR ALL USING (
    (SELECT true FROM bookings WHERE id = booking_id) -- This relies on the booking RLS
  );
`;

const SetupGuide: React.FC = () => {
    return (
        <section className="mt-16 bg-base-200 p-8 rounded-xl shadow-lg border border-base-300">
             <div className="flex items-center mb-4">
                <div className="flex-shrink-0 w-12 h-12 bg-brand-primary/20 text-brand-primary rounded-full flex items-center justify-center mr-4 border-2 border-brand-primary/50">
                    <DatabaseIcon />
                </div>
                <h2 className="text-2xl md:text-3xl font-bold text-white">Backend Setup Guide</h2>
            </div>
            <p className="mb-4 text-content">
                This application requires several tables and policies in your Supabase project. Run the following SQL scripts in your project's SQL Editor to get started.
            </p>

            <div className="space-y-6">
                <div>
                    <h3 className="text-xl font-semibold text-white mb-2">1. User Profiles Table</h3>
                    <p>This table stores user data like name and role. The trigger automatically creates a profile when a new user signs up.</p>
                    <CodeBlock code={profilesTableSql} language="sql" />
                    <CodeBlock code={profilesRlsSql} language="sql" />
                    <CodeBlock code={newUserTriggerSql} language="sql" />
                </div>
                 <div>
                    <h3 className="text-xl font-semibold text-white mb-2">2. Equipment & Booking Tables</h3>
                    <p>These tables store the equipment inventory and booking information.</p>
                    <CodeBlock code={equipmentTablesSql} language="sql" />
                    <CodeBlock code={equipmentRlsSql} language="sql" />
                </div>
            </div>
      </section>
    )
}

export default SetupGuide;
